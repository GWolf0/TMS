title: TMS (Transportation Management System)

description: |
  A web app for managing employee transportation, operated by an organization 
  that owns vehicles and drivers. It serves multiple registered companies, 
  each with employees using the service.

technologies: 
  backend: PHP (Laravel)
  frontend: JavaScript/TypeScript (React, Inertia.js)
  database: MySQL
  auth: Session-based
  deployment: VPS, Cloud, or Docker containers

actors:
  - App Admin (owner of the system)
  - Transport Driver
  - Registered Organization(s)
  - Employee (of a registered org)

core_features:
  - Authentication
  - CRUD on all models for admin user
  - App Settings (global shift timing rules, and owner infos) through single record table (TMS_System)
  - Automatic Shifts Generation (based on reservations)
  - Role-based Dashboards for three roles(admin, employee, driver)

role_abilities:
  admin:
    - Full access to all models
    - Configure global settings (shift timings, etc.) through single record table "tms_system"
    - Manually trigger shift processing
    - Register users, org, etc
  driver:
    - View current assigned shifts if any
    - Set availability (toggle only) through "meta" json field shared for all users
    - View profile info
  employee:
    - Reserve/cancel trips (within allowed time window)
    - View reservation history
    - View profile info
  guest:
    - Login
    - Request password reset

notes_and_scope:
  - For user friendly foreign key display, "MiscController" implements "fkInfo", which returns a paginated data of pairs<fk_ID,fk_label>
  - Simplified shift conflict resolution (only "NO_SEATS" conflict for now)
  - Limit driver availability logic to "available/unavailable" with shared "meta" json field on all users
  - Multilanguage support: postpone

main_entities:
  - users: all user types (admin, driver, employee) with role column
  - organizations: companies using the transport service
  - vehicles: service provider's fleet
  - drivers: internal drivers with availability flag
  - trajects: destinations/commute zones
  - reservations: employee reservations (pickup/dropoff)
  - shifts: generated shifts (based on driver/vehicle/traject/time)
  - tms_system: shift timings, default settings, owner info
  - conflicts: log conflicts (no_seat only for MVP) 

automated_processes:
  shift_generation:
    - Based on reservations, timing, drivers availability, vehicles status
    - Dropoffs: process same day after reservation window closes
    - Pickups: process day before, after reservation window closes
    - Manual trigger option via admin dashboard
    - Handle conflicts (e.g. no available seats)
  shift_generation_detail: 
    - employee can reserve pickup/dropoff within the time range specified in the app settings
    - within this time range, employee can also cancel his reservations
    - within this time range, driver can edit his availability status
    - after this time range, typically the automated shifts processing will be started
    - this process, analyzes (reservations(type, traject, time), drivers status, vehicles status) to generated shifts
    - shifts are generated and grouped first by type(dropoff, pickup)
  shift_processing_considerations:
    - Reservation types:
      - pickup: processed for the next day
      - dropoff: processed for the current day
    - Reservation filtering:
      - Only reservations with status "pending"
      - Grouped by time, then by traject
    - Reservation windows:
      - Defined in tms_system as "reservation_span"
      - Example format: "11:00a, 13:30p"
      - Shift generation must occur after reservation window closes
    - Available shift times:
      - pickup: from tms_system.available_pickup_times (CSV string)
      - dropoff: from tms_system.available_dropoff_times (CSV string)
      - Used to group reservations by desired departure time
    - Driver availability:
      - From users table with role "driver"
      - Checked via meta JSON field: { "available": true }
    - Vehicle availability:
      - From vehicles table where status is "active"
      - Capacity is used to batch reservations
    - Shift grouping:
      - First grouped by shift time
      - Then grouped by traject
      - Each shift assigned a vehicle and driver
    - Shift creation:
      - New shift created for each reservation batch
      - Reservations assigned to the shift
      - Reservation.status updated to "success"
      - shift_id set in reservation record
    - Conflict handling:
      - If no vehicle or driver is available, log or notify admin
      - Remaining reservations can be marked as "failure"
    - Manual vs automated:
      - Admin can trigger processing manually
      - Auto-processing runs in specified time option in "tms_system"


scheduling:
  - Daily job for shift generation (Laravel scheduler)

optional_features:
  - Multilanguage support (post-MVP)
  - Soft deletes relatively old data
  - Notifications (email/SMS on user account creation, or organization creation)

structure_and_key_files:
  frontend:
    - pages:
      - loginPage.tsx
      - dashboardPage.tsx
    - components:
      - common
      - layouts
      - headers and footers
      - modals
      - login
      - dashboard
    - helpers:
      - common.ts
    - types:
      - common.ts
      - models.ts
      - extra.ts
    - services:
      - dashboardService.ts
    - hooks:
      - useFetch.ts
    - contexts:
      - appContext.tsx
    - consts:
      - consts.ts
  backend:
    - controllers
    - services
    - helpers
    - interfaces
    - routes:
      - web
      - api